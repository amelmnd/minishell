/*
// hd_del.c
//file for the museum
// dev !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//dev
void	print_hd_in_exec_list_node(t_exec_list *exec_list_node)
{
	dprintf(2, "print_hd_in_exec_list_node : Entrée\n");
	t_hd	*hd_node = exec_list_node->hd;

	while (hd_node)
	{
		dprintf(2, "hd_node->str = %s", hd_node->str);
		hd_node = hd_node->next;
	}
}

// dev
void	print_all_hd_remaining(t_msh *msh)
{
	t_exec_list	*exec_list_node = msh->exec_list;

	while (exec_list_node)
	{
		print_hd_in_exec_list_node(exec_list_node);
		dprintf(2, "\n== Passage à l'exec_list_node suivant 
		(ce dprintf 2, contient une nl au début) ==\n");
		exec_list_node = exec_list_node->next;
	}
}

// dev
void	write_the_proper_number(int n)
{
	if (n == 0)
		write(STDOUT_FILENO, "0", 1);
	else if (n == 1)
		write(STDOUT_FILENO, "1", 1);
	else if (n == 2)
		write(STDOUT_FILENO, "2", 1);
	else if (n == 3)
		write(STDOUT_FILENO, "3", 1);
	else if (n == 4)
		write(STDOUT_FILENO, "4", 1);
	else if (n == 5)
		write(STDOUT_FILENO, "5", 1);
	else if (n == 6)
		write(STDOUT_FILENO, "6", 1);
	else if (n == 7)
		write(STDOUT_FILENO, "7", 1);
	else if (n == 8)
		write(STDOUT_FILENO, "8", 1);
	else if (n == 9)
		write(STDOUT_FILENO, "9", 1);
	else if (n == 10)
		write(STDOUT_FILENO, "10", 2);
	else if (n == 11)
		write(STDOUT_FILENO, "11", 2);
	else if (n == 12)
		write(STDOUT_FILENO, "12", 2);
	else if (n == 13)
		write(STDOUT_FILENO, "13", 2);
	else if (n == 14)
		write(STDOUT_FILENO, "14", 2);
}
*/

/*
Ancien get_hd.c
void	get_hd(t_msh *msh, t_exec_list *exec_list_node, int i)
{
	char	*line;

	if (msh && exec_list_node)
	{
		pipe(exec_list_node->hd_get_pipe);
		exec_list_node->hd_get_child = fork();
		if (!(exec_list_node->hd_get_child))
		{
			close(exec_list_node->hd_get_pipe[READ]);
			while (42)
			{
				line = readline("> ");
				if (line == NULL)
				{
					close(exec_list_node->hd_get_pipe[WRITE]);
					exit(EXIT_SUCCESS);
				}
				if (ft_strcmp(line, exec_list_node->redir_array[i].str))
				{
					free_chars(&line);
					break ;
				}
				//dprintf(2, "get_hd(child) : line = %s\n", line);
				write(exec_list_node->hd_get_pipe[WRITE], line, ft_strlen(line));
				write(exec_list_node->hd_get_pipe[WRITE], "\n", 1);
				free_chars(&line);
			}
			close(exec_list_node->hd_get_pipe[WRITE]);
			exit(EXIT_SUCCESS);
		}
		else
		{
			close(exec_list_node->hd_get_pipe[WRITE]);
			
			char	buffer[1024];
			int		nbytes;
			int		count = 0;

			nbytes = read(exec_list_node->hd_get_pipe[READ], buffer, 1023);
			while (nbytes > 0)
			{
				buffer[nbytes] = '\0';
				//dprintf(2, "get_hd (parent) : buffer = %s\n", buffer);
				if (count)
					feed_append_new_hd_node(exec_list_node, buffer);
				else
					exec_list_node->hd->str = ft_strdup(buffer);
				nbytes = read(exec_list_node->hd_get_pipe[READ], buffer, 1023);
				// régler le problème du stockage du heredoc ici
				count++;
			}
			close(exec_list_node->hd_get_pipe[READ]);
			waitpid(exec_list_node->hd_get_child, NULL, 0);
		}
	}
}

//peut-être qu'il n'y a plus besoin de cette version modifiée de strcmp
// vu que readline ne prend pas le \n final, comme le faisait get_next_line
static t_bool	hd_strcmp(char *limiter, char *line)
{
	char	*limiter_with_nl;
	t_bool	return_value;

	return_value = FALSE;
	if (limiter && line)
	{
		limiter_with_nl = ft_strjoin(limiter, "\n");
		if (limiter_with_nl)
		{
			if (ft_strcmp(limiter_with_nl, line))
				return_value = TRUE;
			else
				return_value = FALSE;
			free(limiter_with_nl);
		}
	}
	return (return_value);
}

void	get_hd(t_msh *msh, t_exec_list *exec_list_node, int i)
{
	//kill(0, SIGKILL);
	char	*line;
	int		j;

	//line = NULL;
	j = 0;
	if (exec_list_node && exec_list_node->redir_array
		&& exec_list_node->redir_array[i].str && exec_list_node->hd)
	{
		while (42)
		{
			write(STDOUT_FILENO, " > ", 2);
			msh->program_status = HEREDOC_STATUS;
			line = get_next_line(STDIN_FILENO);
			if (feof(stdin))
				printf("Fin du fichier (Ctrl+D) détectée.\n");
			else
				printf("Erreur de lecture.\n");
			msh->program_status = EXECUTION_STATUS;
			if (ft_strlen(line) == 0)
			{	
				
				//rl_on_new_line();
				//rl_replace_line("", 0);
				//printf("\n");
				//rl_redisplay();
				
				kill(0, SIGKILL);
				printf("vide\n");
				break ;
			}
			printf("sortie de la structure conditionnelle if/else\n");
			if (hd_strcmp(exec_list_node->redir_array[i].str, line))
				break ;
			if (j)
				feed_append_new_hd_node(exec_list_node, line);
			else
				exec_list_node->hd->str = ft_strdup(line);
			free_chars(&line);
			j++;
		}
	}
	free_chars(&line);
	printf("get_hd : sortie\n");
}
*/

/*
Réflexions pour le builtin exit

Pas d'argument :
	assigne la valeur de retour à 0
	quitte le processus
Un seul argument :
	numérique, dans le range d'un long long, entouré d'espaces (avant et après, et ce grâce à des quotes) :
		assigne la valeur de retour au nombre%256
		quitte le processus
	numérique, hors du range d'un long long (min -9223372036854775808 ; max 9223372036854775807)
		affiche un message d'erreur : bash: exit: str_du_nb: numeric argument required
		assigne la valeur de retour à 2
		quitte le processus
	non numérique
		affiche un message d'erreur : bash: exit: arg : numeric argument required
		assigne la valeur de retour à 2
		quitte le processus
Plus d'un argument :
	Le premier est numérique dans le bon range long long
		affiche un message d'erreur : bash: exit: too many arguments
		assigne la valeur de retour à 1
		ne quitte pas le processus
	Le premier n'est pas numérique (des lettres, ou numérique hors du range long long)
		affiche un message d'erreur : bash: exit: arg : numeric argument required	
		assigne la valeur de retour à 2
		quitte le processus

On parcourt le tableau des arguments :
	Traitement du premier argument, sans quitter le processus
	Si premier argument valide, on passe au deuxième argument : 
		too many arguments (traitement en conséquence) + quitter le proc

=== PLAN ===

//assigne msh->return_code au passage
void EASY_TESTS(msh, arg)
	(cond_tests_ok)On vérifie si arg est full of spaces
	(cond_tests_ok)On vérifie si arg est de longueur nulle
	(cond_tests_ok)On vérifie si arg est de longueur 1 et que le seul chr est un nombre
		(sinon ça dégage instant)
		
//assigne msh->return_code au passage
void HT_SPACES_STRIPPED_PARSING(msh, arg)
	si msh->exit->tests_ok
		(malloc dans msh->ht_spaces_stripped) : On strip les spaces au début et à la fin
		On vérifie sur ce strip :
			(cond_tests_ok)la présence de chr non signe ou digit
			(cond_tests_ok)s'il y a plus d'un signe
			(cond_tests_ok)s'il n'y a qu'un seul signe, il doit être au début


//assigne msh->return_code au passage
void FRONT_ZEROS_STRIPPED_PARSING(msh)
	si msh->exit->tests_ok	
		(cond_tests_ok)on vérifie si le premier strip ne contient pas que des zéros
			(avec éventuellement un signe au début)
		(malloc dans msh->front_zeros_stripped) : On strip les éventuels zéros 
			entre le signe et le premier chiffre non nul			
		(cond_tests_ok)
			avec signe
				longueur inférieure ou égale à 20
			sans signe
				longueur inférieure ou égale à 19

//assigne msh->return_code au passage
t_bool LIMITS_SINGLE_SHORTCUTS(msh)
	si msh->exit->tests_ok	
		if (ft_strcmp(msh->exit->front_zeros_stripped, "-9223372036854775808"))
		{
			msh->return_code =  0;
			return (TRUE);
		}
		if (ft_strcmp(msh->exit->front_zeros_stripped, "-9223372036854775807"))
		{
			msh->return_code =  1;
			return (TRUE);
		}
		if (ft_strcmp(msh->exit->front_zeros_stripped, "9223372036854775807"))
		{
			msh->return_code =  255;
			return (TRUE);
		}
	return (FALSE);

//assigne msh->return_code au passage


void	NORMAL_CASES_EXIT_ATOI(msh)
{
	int			i;
	long long	ret;
	char		*fzs;

	i = -1;
	ret = 0;
	fzs = msh->exit->front_zeros_stripped;
	while (++i < msh->exit->len_fzs)
	{
		ret *= 10;
		if (!i && (fzs[i] == '+' || fzs[i] == '-'))
			continue ;
		ret += fzs[i] - 48;
		if (ret < 0 || (i < len_fzs && ret >= 922337203685477580
			&& fzs[i + 1] > '7')) // à stocker dans une fonction annexe ?
		{
			msh->return_code = 2;
			return ;
		}
	}
	if (ret < 0)
		ret = modulo_for_neg(ret);
	ret *= get_sign(arg);
	return ((int)(ret % 256));
}


// POINT DE DEPART !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//assigne msh->return_code au passage
t_bool PARSING_ARG(msh, arg) :
	EASY_TESTS(msh, arg)
	HT_SPACES_STRIPPED_PARSING(msh, arg))
	FRONT_ZEROS_STRIPPED_PARSING(msh)
	if (!LIMITS_SINGLE_SHORTCUTS(msh) && msh->exit->tests_ok)
		NORMAL_CASES_EXIT_ATOI(msh)
	return (msh->exit->tests_ok)
*/

/*
// gen_random_str_del.c
char gen_random_printable_char_ascii(t_msh *msh)
{
	char	random_char = 0;

	while (!ft_isprint((int)random_char))
		random_char = (char)msh_random_0_127(msh);
	return (random_char);
}

char *gen_random_str(t_msh *msh)
{
	int len_str = 0;
	char *random_str;
	int i = -1;

	while (len_str < 1 || len_str > 15)
		len_str = msh_random_0_99(msh) % 15;
	random_str = (char *)malloc(sizeof(char) * (len_str + 1));
	if (!random_str)
		return (NULL);
	random_str[len_str] = '\0';
	while (++i < len_str)
		random_str[i] = gen_random_printable_char_ascii(msh);
	return (random_str);
}
*/

/*
// exp_list_node_management_del.c
void	fill_the_first_node(t_msh *msh)
{
	t_exp_list *first_node = NULL;

	if (msh)
	{
		if (msh->exp_list)
		{
			while (msh->exp_list->previous)
			{
				print_node(first_node);
				first_node = msh->exp_list->previous;
			}
		}
	}
	if (!first_node)
		first_node = msh->exp_list;
	first_node->str = gen_random_str(msh);
}


t_exp_list	*new_exp_list_node(void)
{
	t_exp_list *new_node;

	new_node = NULL;
	new_node = (t_exp_list *)malloc(sizeof(t_exp_list));
	if (!new_node)
		return (NULL);
	return (new_node);
}

void	init_node_exp_list(t_msh *msh)
{
	msh->exp_list->previous = NULL;
	msh->exp_list->next = NULL;
	msh->exp_list->str = NULL;
	msh->exp_list->exp_type = 0;
}

void	add_exp_list_node(t_msh *msh, t_exp_list *node)
{
	t_exp_list	*node_i;

	node_i = msh->exp_list;
	while (node_i->next)
		node_i = node_i->next;
	node_i->next = node;
	node->previous = node_i;
}

void	feed_exp_list_node(t_exp_list *exp_list, char *str, int exp_type)
{
	exp_list->str = str;
	exp_list->exp_type = exp_type;
}

void	add_pipe_exp_list_node(t_msh *msh)
{
	t_exp_list	*pipe_exp_list_node;

	pipe_exp_list_node = new_exp_list_node();
	feed_exp_list_node(pipe_exp_list_node, NULL, 5);
	add_exp_list_node(msh, pipe_exp_list_node);
}
*/

/*
//exp_list_generator_del.c
void	exp_list_generator(t_msh *msh)
{
	int nb_pipe = 0;
	int i = -1;
	int nb_elt;
	int j;
	t_exp_list	*node = NULL;
	char *str = NULL;
	int exp_type = 0;

	while (nb_pipe <= 2 || nb_pipe >= 7)
		nb_pipe = msh_random_0_99(msh)%8;
	while (++i < nb_pipe + 1)
	{
		nb_elt = 0;
		while (nb_elt <= 5 || nb_elt >= 10)
			nb_elt = msh_random_0_99(msh)%10;
		j = -1;
		while (++j < nb_elt)
		{
			node = new_exp_list_node();
			str = gen_random_str(msh);
			exp_type = msh_random_0_99(msh) % 5;
			feed_exp_list_node(node, str, exp_type);
			add_exp_list_node(msh, node);
		}
		if (i != nb_pipe)
			add_pipe_exp_list_node(msh);
	}
	fill_the_first_node(msh);
}

int	main(int ac, char **av, char **envp)
{
	t_msh	*msh;

	
	msh = new_msh();
	init_msh(msh);

	init_node_exp_list(msh);
	exp_list_generator(msh);
	//print_exp_list(msh);
	print_exp_list_one_line(msh);
	
	build_exec_list(msh);
	//print_exec_list(msh);

	execution(msh, ac, av, envp);

	//free_msh(msh);
	return (0);
}
*/


/*
retrieve_prim_env_in_prim_env_list_del.c
//les deux fonctions ci-dessous doivent rester solidaires
static void	init_prim_env_list(t_env_list *prim_env_list)
{
	prim_env_list->name = NULL;
	prim_env_list->next = NULL;
	prim_env_list->previous = NULL;
	prim_env_list->value = NULL;
}

t_env_list	*new_env_list(void)
{
	t_env_list	*new;

	new = NULL;
	new = (t_env_list *)malloc(sizeof(t_env_list));
	if (!new)
		return (NULL);
	init_prim_env_list(new);
	return (new);
}

int	get_index_first_equal(char *str)
{
	int	index_first_equal;

	index_first_equal = -1;
	while (str && str[++index_first_equal])
	{
		if (str[index_first_equal] == '=')
			return (index_first_equal);
	}
	return (0);
}

char	*get_name_var(char *var_n_value)
{
	char	*name_var;
	int		index_first_equal;
	int		i;

	name_var = NULL;
	index_first_equal = get_index_first_equal(var_n_value);
	if (index_first_equal == -1)
		return (NULL);
	name_var = (char *)malloc(sizeof(char) * (index_first_equal + 1));
	if (!name_var)
		return (NULL);
	i = -1;
	while (var_n_value[++i] != '=')
		name_var[i] = var_n_value[i];
	name_var[index_first_equal] = '\0';
	return (name_var);
}

int	get_value_size(char *var_n_value)
{
	return (ft_strlen(var_n_value) - get_index_first_equal(var_n_value) - 1);
}

char	*get_value_var(char *var_n_value)
{
	char	*value_var;
	int		value_size;
	int		i;
	int		j;

	value_var = NULL;
	value_size = get_value_size(var_n_value);
	value_var = (char *)malloc(sizeof(char) * value_size + 1);
	if (!value_var)
		return (NULL);
	i = 0;
	j = get_index_first_equal(var_n_value);
	while (var_n_value[++j])
		value_var[i++] = var_n_value[j];
	value_var[value_size] = '\0';
	return (value_var);
}

void	fill_first_env_list_node(t_msh *msh, char *var_n_value)
{
	t_env_list	*first_env_list_node;

	first_env_list_node = msh->prim_env_list;
	first_env_list_node->name = get_name_var(var_n_value);
	first_env_list_node->value = get_value_var(var_n_value);
}

void	append_new_fed_list_node(t_msh *msh, char *var_n_value)
{
	t_env_list	*last_env_list_node;
	t_env_list	*new_env_list_node;

	last_env_list_node = msh->prim_env_list;
	new_env_list_node = new_env_list();
	while (last_env_list_node->next)
		last_env_list_node = last_env_list_node->next;
	last_env_list_node->next = new_env_list_node;
	new_env_list_node->previous = last_env_list_node;
	new_env_list_node->name = get_name_var(var_n_value);
	new_env_list_node->value = get_value_var(var_n_value);
}

void	retrieve_env_in_env_list(t_msh *msh, char *envp[])
{
	int	i;

	if (msh)
	{
		if (envp)
			msh->prim_env_list = new_env_list();
		i = -1;
		while (envp && envp[++i])
		{
			if (!i)
				fill_first_env_list_node(msh, envp[i]);
			else
				append_new_fed_list_node(msh, envp[i]);
		}
	}
}
*/

